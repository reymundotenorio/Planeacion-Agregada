/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DemandaPOJO;
import Controller.ObtenerIcono;
import static Controller.ValidarCadena.ValidarCadena;
import static Controller.ValidarCadena.ValidarEntero;
import static Controller.ValidarCadena.ValidarFloat;
import com.keffect.effects.animatedEffects.EntryBoucing;
import com.keffect.effects.animatedEffects.Shape;
import com.keffectpanel.KEffectPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Reymundo Tenorio
 */
public class PlaneacionP extends javax.swing.JFrame {

    /**
     * Creates new form LugarP
     */
    public PlaneacionP() {

        try {
            this.setIconImage(new ObtenerIcono().ObtenerIcono("Icono.png")); //Agragar Icono a Ventana
        } catch (NullPointerException ex) {
            System.err.println("Error al agregar icono: " + ex.getMessage());
        }

        initComponents();
        TablaDemanda.setFont(new java.awt.Font("Tahoma", Font.BOLD, 14));
        TablaDemanda.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        TablaPersecusion.setFont(new java.awt.Font("Tahoma", Font.BOLD, 14));
        TablaPersecusion.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        TablaFuerzaNivelada.setFont(new java.awt.Font("Tahoma", Font.BOLD, 14));
        TablaFuerzaNivelada.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        TablaOutsourcing.setFont(new java.awt.Font("Tahoma", Font.BOLD, 14));
        TablaOutsourcing.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        txtCtoContra.setTransferHandler(null);
        txtCtoDesp.setTransferHandler(null);
        txtCtoHrsE.setTransferHandler(null);
        txtCtoHrsN.setTransferHandler(null);
        txtCtoMant.setTransferHandler(null);
        txtCtoOutsourcing.setTransferHandler(null);
        txtCtoUnid.setTransferHandler(null);
        txtDemanda.setTransferHandler(null);
        txtDiasLab.setTransferHandler(null);
        txtHorasUnid.setTransferHandler(null);
        txtIniTrab.setTransferHandler(null);
        txtInvIni.setTransferHandler(null);
        txtNombreP.setTransferHandler(null);
        txtStockSeguridad.setTransferHandler(null);

        simbolo = new DecimalFormatSymbols();
        simbolo.setDecimalSeparator('.');
        simbolo.setGroupingSeparator(',');
        df = new DecimalFormat("###,###.##", simbolo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelNuevo = new javax.swing.JPanel();
        PanelSecundario = new javax.swing.JPanel();
        btnnew = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        PanelPrimario = new javax.swing.JPanel();
        Inputs = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtHorasUnid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtCtoUnid = new javax.swing.JTextField();
        txtCtoHrsN = new javax.swing.JTextField();
        txtCtoHrsE = new javax.swing.JTextField();
        txtCtoContra = new javax.swing.JTextField();
        txtCtoDesp = new javax.swing.JTextField();
        txtIniTrab = new javax.swing.JTextField();
        txtCtoMant = new javax.swing.JTextField();
        txtInvIni = new javax.swing.JTextField();
        txtCtoOutsourcing = new javax.swing.JTextField();
        txtStockSeguridad = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cmbPeriodoMant = new javax.swing.JComboBox<>();
        Demanda = new javax.swing.JPanel();
        DatosD = new javax.swing.JPanel();
        txtNombreP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDiasLab = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtDemanda = new javax.swing.JTextField();
        TablaD = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaDemanda = new javax.swing.JTable();
        PanelPersecusion = new javax.swing.JPanel();
        PanelPrimario2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablaPersecusion = new javax.swing.JTable();
        PanelSecundario2 = new javax.swing.JPanel();
        lblTotalP = new javax.swing.JLabel();
        PanelFuerzaNivelada = new javax.swing.JPanel();
        PanelPrimario3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TablaFuerzaNivelada = new javax.swing.JTable();
        PanelSecundario3 = new javax.swing.JPanel();
        lblTotalF = new javax.swing.JLabel();
        PanelOutsourcing = new javax.swing.JPanel();
        PanelPrimario4 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TablaOutsourcing = new javax.swing.JTable();
        PanelSecundario4 = new javax.swing.JPanel();
        lblTotalO = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Planeación Agregada");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        //KEffectPanel effectPanel = new KEffectPanel();
        //PanelNuevo = effectPanel;
        PanelNuevo = PanelEffect;
        PanelNuevo.setBackground(new java.awt.Color(0, 153, 204));
        PanelNuevo.setLayout(new java.awt.BorderLayout());

        PanelSecundario.setBackground(new java.awt.Color(245, 127, 23));

        btnnew.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnnew.setForeground(new java.awt.Color(255, 255, 255));
        btnnew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Nuevo.png"))); // NOI18N
        btnnew.setMnemonic('n');
        btnnew.setText("Nuevo");
        btnnew.setToolTipText("Nuevo registro");
        btnnew.setContentAreaFilled(false);
        btnnew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnnew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnewActionPerformed(evt);
            }
        });
        PanelSecundario.add(btnnew);

        btnsave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnsave.setForeground(new java.awt.Color(255, 255, 255));
        btnsave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Generar.png"))); // NOI18N
        btnsave.setMnemonic('c');
        btnsave.setText("Calcular");
        btnsave.setToolTipText("Guardar Registro");
        btnsave.setContentAreaFilled(false);
        btnsave.setEnabled(false);
        btnsave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnsave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        PanelSecundario.add(btnsave);

        PanelNuevo.add(PanelSecundario, java.awt.BorderLayout.PAGE_END);

        PanelPrimario.setBackground(new java.awt.Color(255, 193, 7));
        PanelPrimario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        PanelPrimario.setLayout(new java.awt.BorderLayout());

        Inputs.setOpaque(false);
        Inputs.setPreferredSize(new java.awt.Dimension(1174, 152));
        Inputs.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(1, 1, 1));
        jLabel2.setText("Horas por unidad");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        Inputs.add(jLabel2, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtHorasUnid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtHorasUnid.setToolTipText("");
        txtHorasUnid.setEnabled(false);
        txtHorasUnid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHorasUnidKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        Inputs.add(txtHorasUnid, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(1, 1, 1));
        jLabel3.setText("Costo por horas normales");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Inputs.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(1, 1, 1));
        jLabel4.setText("Costo por horas extras");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Inputs.add(jLabel4, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(1, 1, 1));
        jLabel6.setText("Costo por unidad");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Inputs.add(jLabel6, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(1, 1, 1));
        jLabel8.setText("Cantidad inicial de trabajadores");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 50, 0, 0);
        Inputs.add(jLabel8, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(1, 1, 1));
        jLabel9.setText("Costo de mantenimiento");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 50, 0, 0);
        Inputs.add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(1, 1, 1));
        jLabel10.setText("Costo por cada contratación");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 50, 0, 0);
        Inputs.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(1, 1, 1));
        jLabel11.setText("Inventario inicial de unidades");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 50, 0, 0);
        Inputs.add(jLabel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(1, 1, 1));
        jLabel12.setText("Costo por unidad Outsourcing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 50, 0, 0);
        Inputs.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(1, 1, 1));
        jLabel13.setText("  % de la demanda");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 0, 0);
        Inputs.add(jLabel13, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(1, 1, 1));
        jLabel14.setText("Costo por cada despido");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 50, 0, 0);
        Inputs.add(jLabel14, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoUnid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoUnid.setToolTipText("");
        txtCtoUnid.setEnabled(false);
        txtCtoUnid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoUnidKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoUnid, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoHrsN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoHrsN.setToolTipText("");
        txtCtoHrsN.setEnabled(false);
        txtCtoHrsN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoHrsNKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoHrsN, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoHrsE.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoHrsE.setToolTipText("");
        txtCtoHrsE.setEnabled(false);
        txtCtoHrsE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoHrsEKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoHrsE, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoContra.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoContra.setToolTipText("");
        txtCtoContra.setEnabled(false);
        txtCtoContra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoContraKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoContra, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoDesp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoDesp.setToolTipText("");
        txtCtoDesp.setEnabled(false);
        txtCtoDesp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoDespKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoDesp, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtIniTrab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtIniTrab.setToolTipText("");
        txtIniTrab.setEnabled(false);
        txtIniTrab.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIniTrabKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        Inputs.add(txtIniTrab, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoMant.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoMant.setToolTipText("");
        txtCtoMant.setEnabled(false);
        txtCtoMant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoMantKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoMant, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtInvIni.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtInvIni.setToolTipText("");
        txtInvIni.setEnabled(false);
        txtInvIni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInvIniKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        Inputs.add(txtInvIni, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCtoOutsourcing.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCtoOutsourcing.setToolTipText("");
        txtCtoOutsourcing.setEnabled(false);
        txtCtoOutsourcing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCtoOutsourcingKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtCtoOutsourcing, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtStockSeguridad.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtStockSeguridad.setToolTipText("");
        txtStockSeguridad.setEnabled(false);
        txtStockSeguridad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockSeguridadKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 0, 0);
        Inputs.add(txtStockSeguridad, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(1, 1, 1));
        jLabel15.setText("Stock de seguridad");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 50, 0, 0);
        Inputs.add(jLabel15, gridBagConstraints);

        cmbPeriodoMant.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        cmbPeriodoMant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "unid x hora", "unid x día", "unid x mes", "unid x año" }));
        cmbPeriodoMant.setEnabled(false);
        cmbPeriodoMant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbPeriodoMantKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        Inputs.add(cmbPeriodoMant, gridBagConstraints);

        PanelPrimario.add(Inputs, java.awt.BorderLayout.PAGE_START);

        Demanda.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Demanda", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        Demanda.setOpaque(false);
        Demanda.setLayout(new java.awt.BorderLayout());

        DatosD.setOpaque(false);
        DatosD.setPreferredSize(new java.awt.Dimension(1132, 65));
        DatosD.setLayout(new java.awt.GridBagLayout());

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtNombreP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNombreP.setToolTipText("");
        txtNombreP.setEnabled(false);
        txtNombreP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombrePKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 154;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        DatosD.add(txtNombreP, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(1, 1, 1));
        jLabel7.setText("Nombre periodo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 50, 22, 0);
        DatosD.add(jLabel7, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtDiasLab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDiasLab.setToolTipText("");
        txtDiasLab.setEnabled(false);
        txtDiasLab.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiasLabKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        DatosD.add(txtDiasLab, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(1, 1, 1));
        jLabel5.setText("Días laborales");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 50, 22, 0);
        DatosD.add(jLabel5, gridBagConstraints);

        btnAdd.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnAdd.setText("Agregar");
        btnAdd.setEnabled(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 50, 22, 181);
        DatosD.add(btnAdd, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(1, 1, 1));
        jLabel16.setText("Demanda pronósticada");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 41, 22, 0);
        DatosD.add(jLabel16, gridBagConstraints);

        /*CustomTextField customTextField = new CustomTextField(100);
        txtHorasUnid = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtDemanda.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDemanda.setToolTipText("");
        txtDemanda.setEnabled(false);
        txtDemanda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDemandaKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        DatosD.add(txtDemanda, gridBagConstraints);

        Demanda.add(DatosD, java.awt.BorderLayout.PAGE_START);

        TablaD.setLayout(new java.awt.BorderLayout());

        TablaDemanda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        TablaDemanda.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TablaDemanda);

        TablaD.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        Demanda.add(TablaD, java.awt.BorderLayout.CENTER);

        PanelPrimario.add(Demanda, java.awt.BorderLayout.CENTER);

        PanelNuevo.add(PanelPrimario, java.awt.BorderLayout.CENTER);

        TabbedPane.addTab("Datos", PanelNuevo);

        PanelPersecusion = PanelEffect2;
        PanelPersecusion.setLayout(new javax.swing.BoxLayout(PanelPersecusion, javax.swing.BoxLayout.LINE_AXIS));

        PanelPrimario2.setBackground(new java.awt.Color(255, 193, 7));
        PanelPrimario2.setLayout(new java.awt.BorderLayout());

        TablaPersecusion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaPersecusion.setToolTipText("Registros");
        TablaPersecusion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaPersecusion.getTableHeader().setReorderingAllowed(false);
        TablaPersecusion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaPersecusionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaPersecusionFocusLost(evt);
            }
        });
        TablaPersecusion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaPersecusionMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaPersecusionMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(TablaPersecusion);

        PanelPrimario2.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        PanelSecundario2.setBackground(new java.awt.Color(245, 127, 23));

        lblTotalP.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        lblTotalP.setForeground(java.awt.Color.white);
        PanelSecundario2.add(lblTotalP);

        PanelPrimario2.add(PanelSecundario2, java.awt.BorderLayout.PAGE_END);

        PanelPersecusion.add(PanelPrimario2);

        TabbedPane.addTab("Persecusión", PanelPersecusion);

        PanelFuerzaNivelada = PanelEffect3;
        PanelFuerzaNivelada.setLayout(new javax.swing.BoxLayout(PanelFuerzaNivelada, javax.swing.BoxLayout.LINE_AXIS));

        PanelPrimario3.setBackground(new java.awt.Color(255, 193, 7));
        PanelPrimario3.setLayout(new java.awt.BorderLayout());

        TablaFuerzaNivelada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaFuerzaNivelada.setToolTipText("Registros");
        TablaFuerzaNivelada.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaFuerzaNivelada.getTableHeader().setReorderingAllowed(false);
        TablaFuerzaNivelada.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFuerzaNiveladaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFuerzaNiveladaFocusLost(evt);
            }
        });
        TablaFuerzaNivelada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaFuerzaNiveladaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaFuerzaNiveladaMousePressed(evt);
            }
        });
        jScrollPane6.setViewportView(TablaFuerzaNivelada);

        PanelPrimario3.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        PanelSecundario3.setBackground(new java.awt.Color(245, 127, 23));

        lblTotalF.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        lblTotalF.setForeground(java.awt.Color.white);
        PanelSecundario3.add(lblTotalF);

        PanelPrimario3.add(PanelSecundario3, java.awt.BorderLayout.PAGE_END);

        PanelFuerzaNivelada.add(PanelPrimario3);

        TabbedPane.addTab("Fuerza nivelada y horas extras", PanelFuerzaNivelada);

        PanelOutsourcing = PanelEffect4;
        PanelOutsourcing.setLayout(new javax.swing.BoxLayout(PanelOutsourcing, javax.swing.BoxLayout.LINE_AXIS));

        PanelPrimario4.setBackground(new java.awt.Color(255, 193, 7));
        PanelPrimario4.setLayout(new java.awt.BorderLayout());

        TablaOutsourcing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaOutsourcing.setToolTipText("Registros");
        TablaOutsourcing.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaOutsourcing.getTableHeader().setReorderingAllowed(false);
        TablaOutsourcing.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaOutsourcingFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaOutsourcingFocusLost(evt);
            }
        });
        TablaOutsourcing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaOutsourcingMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaOutsourcingMousePressed(evt);
            }
        });
        jScrollPane7.setViewportView(TablaOutsourcing);

        PanelPrimario4.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        PanelSecundario4.setBackground(new java.awt.Color(245, 127, 23));

        lblTotalO.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        lblTotalO.setForeground(java.awt.Color.white);
        PanelSecundario4.add(lblTotalO);

        PanelPrimario4.add(PanelSecundario4, java.awt.BorderLayout.PAGE_END);

        PanelOutsourcing.add(PanelPrimario4);

        TabbedPane.addTab("Outsourcing", PanelOutsourcing);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1332, 761));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    DecimalFormatSymbols simbolo;
    DecimalFormat df;

    public void CleanAll() {
        txtCtoContra.setText("");
        txtCtoDesp.setText("");
        txtCtoHrsE.setText("");
        txtCtoHrsN.setText("");
        txtCtoMant.setText("");
        txtCtoOutsourcing.setText("");
        txtCtoUnid.setText("");
        txtDemanda.setText("");
        txtDiasLab.setText("");
        txtHorasUnid.setText("");
        txtIniTrab.setText("");
        txtInvIni.setText("");
        txtNombreP.setText("");
        txtStockSeguridad.setText("");
        cmbPeriodoMant.setSelectedIndex(0);

    }

    public void EnableAll() {

        txtCtoContra.setEnabled(true);
        txtCtoDesp.setEnabled(true);
        txtCtoHrsE.setEnabled(true);
        txtCtoHrsN.setEnabled(true);
        txtCtoMant.setEnabled(true);
        txtCtoOutsourcing.setEnabled(true);
        txtCtoUnid.setEnabled(true);
        txtDemanda.setEnabled(true);
        txtDiasLab.setEnabled(true);
        txtHorasUnid.setEnabled(true);
        txtIniTrab.setEnabled(true);
        txtInvIni.setEnabled(true);
        txtNombreP.setEnabled(true);
        txtStockSeguridad.setEnabled(true);
        cmbPeriodoMant.setEnabled(true);

        btnsave.setEnabled(true);
        btnAdd.setEnabled(true);

    }

    public void DisableAll() {

        txtCtoContra.setEnabled(false);
        txtCtoDesp.setEnabled(false);
        txtCtoHrsE.setEnabled(false);
        txtCtoHrsN.setEnabled(false);
        txtCtoMant.setEnabled(false);
        txtCtoOutsourcing.setEnabled(false);
        txtCtoUnid.setEnabled(false);
        txtDemanda.setEnabled(false);
        txtDiasLab.setEnabled(false);
        txtHorasUnid.setEnabled(false);
        txtIniTrab.setEnabled(false);
        txtInvIni.setEnabled(false);
        txtNombreP.setEnabled(false);
        txtStockSeguridad.setEnabled(false);
        cmbPeriodoMant.setEnabled(false);

        btnsave.setEnabled(false);
        btnAdd.setEnabled(false);

    }

    public void TituloDemanda() {

        Object[] Titulo = {"No.", "Nombre del periodo", "Demanda pronósticada", "Días laborables"};

        modelDemanda.setColumnIdentifiers(Titulo);

        this.TablaDemanda.setModel(modelDemanda);

        JTableHeader header = TablaDemanda.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));

//      TablaDemanda.setDefaultRenderer(Object.class, new FormatoTabla());
        TableColumnModel columnModel = TablaDemanda.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(10); //ID

    }


    private void TablaPersecusionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaPersecusionMouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaPersecusionMouseClicked

    private void TablaPersecusionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaPersecusionFocusLost

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaPersecusionFocusLost

    public void Cerrar() {

        dispose();
    }

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged

        int index = TabbedPane.getSelectedIndex();
        switch (index) {

            case 0:
                PanelEffect.setEffect(new EntryBoucing(1000));
                PanelEffect.startEffect();
                break;

            case 1:

                PanelEffect2.setEffect(new Shape(1000));
                PanelEffect2.startEffect();
                break;

            case 2:

                PanelEffect3.setEffect(new Shape(1000));
                PanelEffect3.startEffect();
                break;

            case 3:

                PanelEffect4.setEffect(new Shape(1000));
                PanelEffect4.startEffect();
                break;

            default:
                break;
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

    KEffectPanel PanelEffect = new KEffectPanel();
    KEffectPanel PanelEffect2 = new KEffectPanel();
    KEffectPanel PanelEffect3 = new KEffectPanel();
    KEffectPanel PanelEffect4 = new KEffectPanel();


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        PanelEffect.setEffect(new EntryBoucing(1000));
        PanelEffect.startEffect();

        TituloDemanda();

// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Cerrar();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void TablaPersecusionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaPersecusionFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaPersecusionFocusGained

    private void TablaPersecusionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaPersecusionMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaPersecusionMousePressed

    public void ValidarDatos() {
        String HrsUnid, HorasN, HorasE, CtoUnid, IniTrab, Contra, Desp, OutS, InvI, SS, Mant, PerMant;

        HrsUnid = txtHorasUnid.getText().trim();
        HorasN = txtCtoHrsN.getText().trim();
        HorasE = txtCtoHrsE.getText().trim();
        CtoUnid = txtCtoUnid.getText().trim();
        IniTrab = txtIniTrab.getText().trim();
        Contra = txtCtoContra.getText().trim();
        Desp = txtCtoDesp.getText().trim();
        OutS = txtCtoOutsourcing.getText().trim();
        InvI = txtInvIni.getText().trim();
        SS = txtStockSeguridad.getText().trim();
        Mant = txtCtoMant.getText().trim();
        PerMant = (String) cmbPeriodoMant.getSelectedItem();

        if ("".equals(HrsUnid)) {
            JOptionPane.showMessageDialog(this, "Ingrese la cantidad de horas por unidad", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtHorasUnid.requestFocus();
            return;
        }
        if ("".equals(HorasN)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo por horas normales", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoHrsN.requestFocus();
            return;
        }
        if ("".equals(HorasE)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo por horas extras", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoHrsE.requestFocus();
            return;
        }
        if ("".equals(CtoUnid)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo por unidad", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoUnid.requestFocus();
            return;
        }
        if ("".equals(IniTrab)) {
            JOptionPane.showMessageDialog(this, "Ingrese el cantidad inicial de trabajadores", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtIniTrab.requestFocus();
            return;
        }
        if ("".equals(Contra)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo por cada contratación", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoContra.requestFocus();
            return;
        }
        if ("".equals(Desp)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo por cada despido", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoDesp.requestFocus();
            return;
        }
        if ("".equals(OutS)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo por cada unidad outsourcing", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoOutsourcing.requestFocus();
            return;
        }
        if ("".equals(InvI)) {
            JOptionPane.showMessageDialog(this, "Ingrese el inventario inicial de unidades", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtInvIni.requestFocus();
            return;
        }
        if ("".equals(SS)) {
            JOptionPane.showMessageDialog(this, "Ingrese el stock de seguridad", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtStockSeguridad.requestFocus();
            return;
        }
        if ("".equals(Mant)) {
            JOptionPane.showMessageDialog(this, "Ingrese el costo de mantenimiento", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtCtoMant.requestFocus();
            return;
        }

    }

    public void Calcular() {

//        String HrsUnid, HorasN, HorasE, CtoUnid, IniTrab, Contra, Desp, OutS, InvI, SS, Mant, PerMant;
//
//        HrsUnid = txtHorasUnid.getText().trim();
//        HorasN = txtCtoHrsN.getText().trim();
//        HorasE = txtCtoHrsE.getText().trim();
//        CtoUnid = txtCtoUnid.getText().trim();
//        IniTrab = txtIniTrab.getText().trim();
//        Contra = txtCtoContra.getText().trim();
//        Desp = txtCtoDesp.getText().trim();
//        OutS = txtCtoOutsourcing.getText().trim();
//        InvI = txtInvIni.getText().trim();
//        SS = txtStockSeguridad.getText().trim();
//        Mant = txtCtoMant.getText().trim();
//        PerMant = (String) cmbPeriodoMant.getSelectedItem();
//
//        float HorasUnid, HorasNormales, HorasExtras, CostoUnidad, CtoContratar, CtoDespedir,
//                CtoOutsourcing, StockSeguridad, CtoMantenimiento;
//        int InicialTrabajadores, InventarioInicial;
//
//        HorasUnid = Float.parseFloat(HrsUnid);
//        HorasNormales = Float.parseFloat(HorasN);
//        HorasExtras = Float.parseFloat(HorasE);
//        CostoUnidad = Float.parseFloat(CtoUnid);
//        CtoContratar = Float.parseFloat(Contra);
//        CtoDespedir = Float.parseFloat(Desp);
//        CtoOutsourcing = Float.parseFloat(OutS);
//        StockSeguridad = Float.parseFloat(SS);
//        CtoMantenimiento = Float.parseFloat(Mant);
//
//        InicialTrabajadores = Integer.parseInt(IniTrab);
//        InventarioInicial = Integer.parseInt(InvI);
        CalcularProduccionRequerida();

    }

    ArrayList<DemandaPOJO> DemandaList;
    ArrayList<Float> ProdRequeridaList;

    ArrayList<Float> HorasDisponMList;
    ArrayList<Float> HorasDisponNList;

    ArrayList<Float> HorasProdReqList;

    public void CalcularProduccionRequerida() {

        DemandaList = new ArrayList<>();
        HorasDisponMList = new ArrayList<>();
        HorasDisponNList = new ArrayList<>();
        HorasProdReqList = new ArrayList<>();

        for (int i = 0; i < TablaDemanda.getRowCount(); i++) {
            String Nombre = ((String) this.TablaDemanda.getModel().getValueAt(i, 1));
            float DemandaP = Float.parseFloat(this.TablaDemanda.getModel().getValueAt(i, 2).toString());
            int DiasLab = Integer.parseInt(this.TablaDemanda.getModel().getValueAt(i, 3).toString());

            DemandaList.add(new DemandaPOJO(Nombre, DemandaP, DiasLab));
        }

        //Formato a tabla de estrategias
        TituloEstrategias();

        String StockS = txtStockSeguridad.getText().trim();
        String UnidsI = txtInvIni.getText().trim();
        String HrsUnid = txtHorasUnid.getText().trim();
        String TrabIni = txtIniTrab.getText().trim();

        float SS = Float.valueOf(StockS);
        float InvIni = Float.parseFloat(UnidsI);
        float HorasUnid = Float.parseFloat(HrsUnid);
        float TrabIniciales = Float.parseFloat(TrabIni);

        SS = SS / 100;

        ProdRequeridaList = new ArrayList<>();

        //Cálculo de Demanda Requerida
        for (DemandaPOJO DemandaLista : DemandaList) {

            float DemandaP = DemandaLista.getDemandaP();
            float StockSeguridad = DemandaP * SS;

            float ProdReq = DemandaP + StockSeguridad;

            ProdReq = ProdReq - InvIni;

            InvIni = StockSeguridad;

            ProdRequeridaList.add(ProdReq);
        }

        for (int k = 0; k < ProdRequeridaList.size(); k++) {

            int Columna = k + 1;

            //Cálculo de Producción Requerida
            float ProdRequerida = ProdRequeridaList.get(k);
            int DiasLaborables = DemandaList.get(k).getDiasLaborables();

            modelPersecucion.setValueAt(df.format(ProdRequerida), 0, Columna);
            modelFuerzaN.setValueAt(df.format(ProdRequerida), 0, Columna);
            modelOutsourcing.setValueAt(df.format(ProdRequerida), 0, Columna);

            //Cálculo de Horas Requeridas
            float HrsProdReq = ProdRequerida * HorasUnid;

            HorasProdReqList.add(HrsProdReq);

            modelPersecucion.setValueAt(df.format(HrsProdReq), 1, Columna);
            modelFuerzaN.setValueAt(df.format(HrsProdReq), 1, Columna);
            modelOutsourcing.setValueAt(df.format(HrsProdReq), 1, Columna);

            //Cálculo de Horas Disponibles
            float HrsDisponM = DiasLaborables * 8;

            HorasDisponMList.add(HrsDisponM);

            modelPersecucion.setValueAt(df.format(HrsDisponM), 2, Columna);
            modelFuerzaN.setValueAt(df.format(HrsDisponM), 2, Columna);
            modelOutsourcing.setValueAt(df.format(HrsDisponM), 2, Columna);

            //Cálculo de Horas Disponibles (N)
            float HrsDisponN = HrsDisponM * TrabIniciales;

            HorasDisponNList.add(HrsDisponN);

            modelFuerzaN.setValueAt(df.format(HrsDisponN), 3, Columna);
            modelOutsourcing.setValueAt(df.format(HrsDisponN), 3, Columna);

        }

        TablaPersecusion.setModel(modelPersecucion);
        TablaFuerzaNivelada.setModel(modelFuerzaN);
        TablaOutsourcing.setModel(modelOutsourcing);

        CalcularPersecucion();

    }

    float TotalOutsourcing = 0;
    float TotalFuerzaNivelada = 0;
    float TotalPersecucion = 0;

    public void CalcularPersecucion() {

        String TrabIni = txtIniTrab.getText().trim();

        String CtoXContra = txtCtoContra.getText().trim();
        String CtoXDesp = txtCtoDesp.getText().trim();
        String CtoXHrsN = txtCtoHrsN.getText().trim();

        float TrabInicial = Float.parseFloat(TrabIni);

        float CtoXContratar = Float.parseFloat(CtoXContra);
        float CtoXDespedir = Float.parseFloat(CtoXDesp);
        float CtoXHrsNormal = Float.parseFloat(CtoXHrsN);

        for (int k = 0; k < ProdRequeridaList.size(); k++) {
            int Columna = k + 1;

            //Cálculo de cantidad trabajadores requeridos
            float HorasDispon = HorasDisponMList.get(k);
            float HorasReq = HorasProdReqList.get(k);
            float TrabReq = HorasReq / HorasDispon;

            TrabReq = (float) Math.ceil(TrabReq);

            modelPersecucion.setValueAt(df.format(TrabReq), 3, Columna);

            float TrabContratar = 0;
            float TrabDespedir = 0;

            //Cálculo de cantidad trabajadores contratados y despedidos
            if (TrabInicial >= TrabReq) { // Despedir

                TrabContratar = 0;
                TrabDespedir = TrabInicial - TrabReq;

            } else if (TrabInicial <= TrabReq) { //Contratar

                TrabDespedir = 0;
                TrabContratar = TrabReq - TrabInicial;

            }

            TrabInicial = TrabReq;

            modelPersecucion.setValueAt(df.format(TrabContratar), 4, Columna);
            modelPersecucion.setValueAt(df.format(TrabDespedir), 5, Columna);

            //Cálculo de Costos de contratar, despedir y horas normales
            float HrsProdReq = HorasProdReqList.get(k);

            float CtoContratar = TrabContratar * CtoXContratar;
            float CtoDespedir = TrabDespedir * CtoXDespedir;
            float CtoHrsNormal = HrsProdReq * CtoXHrsNormal;

            modelPersecucion.setValueAt(df.format(CtoContratar), 6, Columna);
            modelPersecucion.setValueAt(df.format(CtoDespedir), 7, Columna);
            modelPersecucion.setValueAt(df.format(CtoHrsNormal), 8, Columna);

            float Total = CtoContratar + CtoDespedir + CtoHrsNormal;

            TotalPersecucion = TotalPersecucion + Total;

            modelPersecucion.setValueAt(df.format(Total), 9, Columna);
        }

        TablaPersecusion.setModel(modelPersecucion);

        lblTotalP.setText("COSTO TOTAL DE LA ESTRATEGIA DE PERSECUCIÓN: "
                + df.format(TotalPersecucion));

        CalcularFuerzaNivelada();
    }

    public void CalcularFuerzaNivelada() {

        String CtoXHrsN = txtCtoHrsN.getText().trim();
        String CtoXHrsE = txtCtoHrsE.getText().trim();

        float CtoXHrsNormal = Float.parseFloat(CtoXHrsN);
        float CtoXHrsExtras = Float.parseFloat(CtoXHrsE);

        for (int k = 0; k < ProdRequeridaList.size(); k++) {
            int Columna = k + 1;

            float HorasDispon = HorasDisponNList.get(k);
            float HorasReq = HorasProdReqList.get(k);

            float HrsExtrasReq = 0;
            float HrsOciosas = 0;

            //Cálculo de horas extras requeridas y horas ociosas
            if (HorasDispon >= HorasReq) { // Horas Ociosas

                HrsOciosas = HorasDispon - HorasReq;
                HrsExtrasReq = 0;

            } else if (HorasDispon <= HorasReq) { //Horas Extras

                HrsOciosas = 0;
                HrsExtrasReq = HorasReq - HorasDispon;

            }

            modelFuerzaN.setValueAt(df.format(HrsExtrasReq), 4, Columna);
            modelFuerzaN.setValueAt(df.format(HrsOciosas), 5, Columna);

            //Cálculo de Costos de tiempo normal y horas extras
            float CtoHrsNormal = HorasDispon * CtoXHrsNormal;
            float CtoHrsExtras = HrsExtrasReq * CtoXHrsExtras;

            modelFuerzaN.setValueAt(df.format(CtoHrsNormal), 6, Columna);
            modelFuerzaN.setValueAt(df.format(CtoHrsExtras), 7, Columna);

            float Total = CtoHrsNormal + CtoHrsExtras;

            TotalFuerzaNivelada = TotalFuerzaNivelada + Total;

            modelFuerzaN.setValueAt(df.format(Total), 8, Columna);
        }

        TablaFuerzaNivelada.setModel(modelFuerzaN);

        lblTotalF.setText("COSTO TOTAL DE LA ESTRATEGIA DE FUERZA NIVELADA Y HORAS EXTRAS: "
                + df.format(TotalFuerzaNivelada));

        CalcularOutsourcing();
    }

    public void CalcularOutsourcing() {

        String CtoXUnid = txtCtoUnid.getText().trim();
        String CtoXOutS = txtCtoOutsourcing.getText().trim();
        String CtoMant = txtCtoMant.getText().trim();
        String HrsUnid = txtHorasUnid.getText().trim();
        String CtoXHrsN = txtCtoHrsN.getText().trim();

        float CtoXUnidad = Float.parseFloat(CtoXUnid);
        float CtoOutsourcing = Float.parseFloat(CtoXOutS);
        float CtoMantenimiento = Float.parseFloat(CtoMant);
        float HorasUnidad = Float.parseFloat(HrsUnid);
        float CtoXHrsNormal = Float.parseFloat(CtoXHrsN);

        int PeriodMant = cmbPeriodoMant.getSelectedIndex();

        switch (PeriodMant) {
            case 0:
                CtoMantenimiento = CtoMantenimiento * (8 * 30); //de horas a mes
                break;
            case 1:
                CtoMantenimiento = CtoMantenimiento * 30; //de días a mes
                break;
            case 2:  //de mes a mes :/
                break;
            case 3:
                CtoMantenimiento = CtoMantenimiento / 12; //de año a mes
                break;
            default:
                break;
        }

        CtoOutsourcing = CtoOutsourcing - CtoXUnidad;

        float UnidsSobrantes = 0;

        for (int k = 0; k < ProdRequeridaList.size(); k++) {
            int Columna = k + 1;

            float HorasDispon = HorasDisponNList.get(k);
            float ProdReq = ProdRequeridaList.get(k);

            float UnidsFaltantes = 0;

            float UnidadesProducidas = HorasDispon / HorasUnidad;

            modelOutsourcing.setValueAt(df.format(UnidadesProducidas), 4, Columna);

            //Cálculo de unidades faltantes y unidades sobrantes
            if (ProdReq >= UnidadesProducidas) { // Faltantes

                UnidsSobrantes = UnidsSobrantes + 0;
                UnidsFaltantes = ProdReq - UnidadesProducidas;

                if (UnidsSobrantes > 0) {

                    if (UnidsSobrantes >= UnidsFaltantes) {

                        UnidsSobrantes = UnidsSobrantes - UnidsFaltantes;
                        UnidsFaltantes = 0;

                    } else if (UnidsSobrantes <= UnidsFaltantes) {

                        UnidsFaltantes = UnidsFaltantes - UnidsSobrantes;
                        UnidsSobrantes = 0;

                    }
                }

            } else if (ProdReq <= UnidadesProducidas) { //Sobrantes

                UnidsFaltantes = 0;
                UnidsSobrantes = UnidsSobrantes + (UnidadesProducidas - ProdReq);

            }

            modelOutsourcing.setValueAt(df.format(UnidsFaltantes), 5, Columna);
            modelOutsourcing.setValueAt(df.format(UnidsSobrantes), 6, Columna);

            //Cálculo de Costos de tiempo normal y outsourcing
            float CtoHrsNormal = HorasDispon * CtoXHrsNormal;
            float CtoxOutsourcing = UnidsFaltantes * CtoOutsourcing;

            modelOutsourcing.setValueAt(df.format(CtoHrsNormal), 7, Columna);
            modelOutsourcing.setValueAt(df.format(CtoxOutsourcing), 8, Columna);

            //Cálculo de Costos de mantenimiento
            float CtoxMantenimiento = UnidsSobrantes * CtoMantenimiento;

            modelOutsourcing.setValueAt(df.format(CtoxMantenimiento), 9, Columna);

            float Total = CtoHrsNormal + CtoxOutsourcing + CtoxMantenimiento;

            TotalOutsourcing = TotalOutsourcing + Total;

            modelOutsourcing.setValueAt(df.format(Total), 10, Columna);
        }

        TablaOutsourcing.setModel(modelOutsourcing);

        lblTotalO.setText("COSTO TOTAL DE LA ESTRATEGIA DE OUTSOURCING: "
                + df.format(TotalOutsourcing));

        JOptionPane.showMessageDialog(this, "COSTOS TOTALES:"
                + "\n-> ESTRATEGIA PERSECUCIÓN: " + df.format(TotalPersecucion)
                + "\n-> ESTRATEGIA FUERZA NIVELADA Y HORAS EXTRAS: " + df.format(TotalFuerzaNivelada)
                + "\n-> ESTRATEGIA OUTSOURCING: " + df.format(TotalOutsourcing),
                "TOTAL", JOptionPane.INFORMATION_MESSAGE);
    }

    public void TituloEstrategias() {

        int CantidadElementos = DemandaList.size();
        CantidadElementos++;

        Object[] Titulo = new Object[CantidadElementos];

        Titulo[0] = "";

        int i = 0;
        for (DemandaPOJO DemandaLista : DemandaList) {
            i++;
            Titulo[i] = DemandaLista.getNombre();
        }

        modelPersecucion.setColumnIdentifiers(Titulo);
        modelFuerzaN.setColumnIdentifiers(Titulo);
        modelOutsourcing.setColumnIdentifiers(Titulo);

        this.TablaPersecusion.setModel(modelPersecucion);
        this.TablaFuerzaNivelada.setModel(modelFuerzaN);
        this.TablaOutsourcing.setModel(modelOutsourcing);

        JTableHeader headerP = TablaPersecusion.getTableHeader();
        headerP.setFont(new Font("Tahoma", Font.BOLD, 14));

        JTableHeader headerF = TablaFuerzaNivelada.getTableHeader();
        headerF.setFont(new Font("Tahoma", Font.BOLD, 14));

        JTableHeader headerO = TablaOutsourcing.getTableHeader();
        headerO.setFont(new Font("Tahoma", Font.BOLD, 14));

        TablaPersecusion.setDefaultRenderer(Object.class, new FormatoTabla());
        TablaFuerzaNivelada.setDefaultRenderer(Object.class, new FormatoTabla());
        TablaOutsourcing.setDefaultRenderer(Object.class, new FormatoTabla());

        TableColumnModel columnModelP = TablaPersecusion.getColumnModel();
        columnModelP.getColumn(0).setPreferredWidth(240); //Datos

        TableColumnModel columnModelF = TablaFuerzaNivelada.getColumnModel();
        columnModelF.getColumn(0).setPreferredWidth(200); //Datos

        TableColumnModel columnModelO = TablaOutsourcing.getColumnModel();
        columnModelO.getColumn(0).setPreferredWidth(200); //Datos

        modelPersecucion.setRowCount(10);
        modelPersecucion.setValueAt("Producción requerida", 0, 0);
        modelPersecucion.setValueAt("Horas de producción requeridas", 1, 0);
        modelPersecucion.setValueAt("Horas disponibles", 2, 0);
        modelPersecucion.setValueAt("Cantidad de trabajadores requeridas", 3, 0);
        modelPersecucion.setValueAt("Cantida de trabajadores contratados", 4, 0);
        modelPersecucion.setValueAt("Cantida de trabajadores despedidos", 5, 0);
        modelPersecucion.setValueAt("Costo por contratación", 6, 0);
        modelPersecucion.setValueAt("Costo por despido", 7, 0);
        modelPersecucion.setValueAt("Costo tiempo normal", 8, 0);
        modelPersecucion.setValueAt("Costo total", 9, 0);

        TablaPersecusion.setModel(modelPersecucion);

        modelFuerzaN.setRowCount(9);
        modelFuerzaN.setValueAt("Producción requerida", 0, 0);
        modelFuerzaN.setValueAt("Horas de producción requeridas", 1, 0);
        modelFuerzaN.setValueAt("Horas disponibles", 2, 0);
        modelFuerzaN.setValueAt("Horas totales disponibles (N)", 3, 0);
        modelFuerzaN.setValueAt("Horas extras requeridas", 4, 0);
        modelFuerzaN.setValueAt("Horas ociosas", 5, 0);
        modelFuerzaN.setValueAt("Costo tiempo normal", 6, 0);
        modelFuerzaN.setValueAt("Costo tiempo extra", 7, 0);
        modelFuerzaN.setValueAt("Costo total", 8, 0);

        TablaFuerzaNivelada.setModel(modelFuerzaN);

        modelOutsourcing.setRowCount(11);
        modelOutsourcing.setValueAt("Producción requerida", 0, 0);
        modelOutsourcing.setValueAt("Horas de producción requeridas", 1, 0);
        modelOutsourcing.setValueAt("Horas disponibles", 2, 0);
        modelOutsourcing.setValueAt("Horas totales disponibles (N)", 3, 0);
        modelOutsourcing.setValueAt("Unidades producidas", 4, 0);
        modelOutsourcing.setValueAt("Unidades faltantes", 5, 0);
        modelOutsourcing.setValueAt("Unidades sobrantes", 6, 0);
        modelOutsourcing.setValueAt("Costo tiempo normal", 7, 0);
        modelOutsourcing.setValueAt("Costo por outsourcing", 8, 0);
        modelOutsourcing.setValueAt("Costo por mantenimiento", 9, 0);
        modelOutsourcing.setValueAt("Costo total", 10, 0);

        TablaOutsourcing.setModel(modelOutsourcing);

    }


    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        ValidarDatos();
        Calcular();

        // TODO add your handling code here:
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btnnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnewActionPerformed

        EnableAll();
        CleanAll();
        txtHorasUnid.requestFocus();

    }//GEN-LAST:event_btnnewActionPerformed

    private void txtHorasUnidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHorasUnidKeyTyped

        ValidarFloat(this.txtHorasUnid, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoHrsN.requestFocus();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_txtHorasUnidKeyTyped


    private void txtCtoUnidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoUnidKeyTyped

        ValidarFloat(this.txtCtoUnid, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtIniTrab.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCtoUnidKeyTyped

    private void txtCtoHrsNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoHrsNKeyTyped

        ValidarFloat(this.txtCtoHrsN, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoHrsE.requestFocus();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_txtCtoHrsNKeyTyped

    private void txtCtoHrsEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoHrsEKeyTyped

        ValidarFloat(this.txtCtoHrsE, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoUnid.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCtoHrsEKeyTyped

    private void txtCtoContraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoContraKeyTyped

        ValidarFloat(this.txtCtoContra, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoDesp.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCtoContraKeyTyped

    private void txtCtoDespKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoDespKeyTyped

        ValidarFloat(this.txtCtoDesp, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoOutsourcing.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCtoDespKeyTyped

    private void txtIniTrabKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIniTrabKeyTyped

        ValidarEntero(evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoContra.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtIniTrabKeyTyped

    private void txtCtoMantKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoMantKeyTyped

        ValidarFloat(this.txtCtoMant, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            cmbPeriodoMant.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCtoMantKeyTyped

    private void txtInvIniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvIniKeyTyped

        ValidarEntero(evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtStockSeguridad.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtInvIniKeyTyped

    private void txtCtoOutsourcingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtoOutsourcingKeyTyped

        ValidarFloat(this.txtCtoOutsourcing, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtInvIni.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCtoOutsourcingKeyTyped

    private void txtStockSeguridadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockSeguridadKeyTyped

        ValidarFloat(this.txtStockSeguridad, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtCtoMant.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtStockSeguridadKeyTyped

    private void txtNombrePKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombrePKeyTyped

        ValidarCadena(evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtDemanda.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombrePKeyTyped

    private void txtDiasLabKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiasLabKeyTyped

        ValidarEntero(evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            Agregar();

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiasLabKeyTyped

    private void TablaFuerzaNiveladaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFuerzaNiveladaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFuerzaNiveladaFocusGained

    private void TablaFuerzaNiveladaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFuerzaNiveladaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFuerzaNiveladaFocusLost

    private void TablaFuerzaNiveladaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaFuerzaNiveladaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFuerzaNiveladaMouseClicked

    private void TablaFuerzaNiveladaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaFuerzaNiveladaMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFuerzaNiveladaMousePressed

    private void TablaOutsourcingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaOutsourcingFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaOutsourcingFocusGained

    private void TablaOutsourcingFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaOutsourcingFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaOutsourcingFocusLost

    private void TablaOutsourcingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaOutsourcingMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaOutsourcingMouseClicked

    private void TablaOutsourcingMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaOutsourcingMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaOutsourcingMousePressed

    private void txtDemandaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDemandaKeyTyped

        ValidarFloat(this.txtDemanda, evt);

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtDiasLab.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtDemandaKeyTyped

    private void cmbPeriodoMantKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbPeriodoMantKeyTyped

        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtNombreP.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPeriodoMantKeyTyped

    private int Num;

    public void Agregar() {
        String Numero, Nombre, DemandaP, Dias;

        Num++;

        Numero = String.valueOf(Num);
        Nombre = txtNombreP.getText().trim();
        DemandaP = txtDemanda.getText().trim();
        Dias = txtDiasLab.getText().trim();

        if ("".equals(Nombre)) {
            JOptionPane.showMessageDialog(this, "Ingrese el nombre del periodo de la demanda", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtNombreP.requestFocus();
            return;
        }

        if ("".equals(DemandaP)) {
            JOptionPane.showMessageDialog(this, "Ingrese la cantidad de la demanda pronósticada", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtDemanda.requestFocus();
            return;
        }

        if ("".equals(Dias)) {
            JOptionPane.showMessageDialog(this, "Ingrese la cantidad de días laborables del periodo", "Ingrese", JOptionPane.ERROR_MESSAGE);
            txtDiasLab.requestFocus();
            return;
        }

        String[] DemandaD = new String[4];

        DemandaD[0] = Numero;
        DemandaD[1] = Nombre;
        DemandaD[2] = DemandaP;
        DemandaD[3] = Dias;

        modelDemanda.addRow(DemandaD);

        TablaDemanda.setModel(modelDemanda);

        LimpiarDemanda();

    }

    public void LimpiarDemanda() {
        txtNombreP.setText("");
        txtDemanda.setText("");
        txtDiasLab.setText("");

        txtNombreP.requestFocus();
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Agregar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    public class FormatoTabla extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {

            if (column == 0) {
                setBackground(Color.GRAY);
                setForeground(Color.WHITE);
            } else {
                setForeground(Color.BLACK);
                setBackground(Color.WHITE);
            }

            super.getTableCellRendererComponent(table, value, selected, focused, row, column);
            return this;
        }
    }

    DefaultTableModel modelDemanda = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;
        }
        //all cells false

    };

    DefaultTableModel modelPersecucion = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;
        }
        //all cells false

    };

    DefaultTableModel modelFuerzaN = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;
        }
        //all cells false

    };

    DefaultTableModel modelOutsourcing = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;
        }
        //all cells false

    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PlaneacionP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }

        try {

            UIManager.setLookAndFeel(new com.nilo.plaf.nimrod.NimRODLookAndFeel());

        } catch (UnsupportedLookAndFeelException e) {
            //System.out.println("NO SE PUEDE CARGAR");
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                new PlaneacionP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DatosD;
    private javax.swing.JPanel Demanda;
    private javax.swing.JPanel Inputs;
    private javax.swing.JPanel PanelFuerzaNivelada;
    private javax.swing.JPanel PanelNuevo;
    private javax.swing.JPanel PanelOutsourcing;
    private javax.swing.JPanel PanelPersecusion;
    private javax.swing.JPanel PanelPrimario;
    private javax.swing.JPanel PanelPrimario2;
    private javax.swing.JPanel PanelPrimario3;
    private javax.swing.JPanel PanelPrimario4;
    private javax.swing.JPanel PanelSecundario;
    private javax.swing.JPanel PanelSecundario2;
    private javax.swing.JPanel PanelSecundario3;
    private javax.swing.JPanel PanelSecundario4;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JPanel TablaD;
    private javax.swing.JTable TablaDemanda;
    private javax.swing.JTable TablaFuerzaNivelada;
    private javax.swing.JTable TablaOutsourcing;
    private javax.swing.JTable TablaPersecusion;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnnew;
    private javax.swing.JButton btnsave;
    private javax.swing.JComboBox<String> cmbPeriodoMant;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblTotalF;
    private javax.swing.JLabel lblTotalO;
    private javax.swing.JLabel lblTotalP;
    private javax.swing.JTextField txtCtoContra;
    private javax.swing.JTextField txtCtoDesp;
    private javax.swing.JTextField txtCtoHrsE;
    private javax.swing.JTextField txtCtoHrsN;
    private javax.swing.JTextField txtCtoMant;
    private javax.swing.JTextField txtCtoOutsourcing;
    private javax.swing.JTextField txtCtoUnid;
    private javax.swing.JTextField txtDemanda;
    private javax.swing.JTextField txtDiasLab;
    private javax.swing.JTextField txtHorasUnid;
    private javax.swing.JTextField txtIniTrab;
    private javax.swing.JTextField txtInvIni;
    private javax.swing.JTextField txtNombreP;
    private javax.swing.JTextField txtStockSeguridad;
    // End of variables declaration//GEN-END:variables
}
